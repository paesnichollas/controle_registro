#!/bin/bash

# =============================================================================
# SCRIPT: exemplo-uso.sh
# DESCRI√á√ÉO: Exemplo de uso dos scripts de desenvolvimento
# USO: ./exemplo-uso.sh
# AUTOR: Sistema de Automa√ß√£o
# =============================================================================

echo "üöÄ EXEMPLO DE USO DOS SCRIPTS DE DESENVOLVIMENTO"
echo "=================================================="
echo ""

echo "üìã ESTE √â UM EXEMPLO DE COMO USAR OS SCRIPTS"
echo "=============================================="
echo ""

echo "üéØ OBJETIVO:"
echo "   Automatizar testes do sistema Django + React"
echo "   Garantir que tudo funciona antes da produ√ß√£o"
echo "   Facilitar uso para desenvolvedores j√∫nior"
echo ""

echo "üìÅ SCRIPTS CRIADOS:"
echo "==================="
echo "‚úÖ 01-instalar-docker.sh - Instala Docker"
echo "‚úÖ 02-configurar-projeto.sh - Configura projeto"
echo "‚úÖ 03-verificar-compose.sh - Verifica docker-compose"
echo "‚úÖ 04-subir-ambiente.sh - Sobe containers"
echo "‚úÖ 05-testar-acesso.sh - Testa conectividade"
echo "‚úÖ 06-backup-local.sh - Cria backups"
echo "‚úÖ 07-restore-local.sh - Restaura backups"
echo "‚úÖ 08-limpeza-sistema.sh - Limpa sistema"
echo "‚úÖ 09-testes-falha.sh - Testa resili√™ncia"
echo "‚úÖ 10-checklist-final.sh - Checklist completo"
echo "‚úÖ testa-tudo.sh - Executa todos os testes"
echo ""

echo "üöÄ COMO USAR:"
echo "============="
echo ""

echo "1Ô∏è‚É£  EXECU√á√ÉO COMPLETA (RECOMENDADO):"
echo "   ./scripts/scripts-dev/testa-tudo.sh dev"
echo "   ./scripts/scripts-dev/testa-tudo.sh prod"
echo ""

echo "2Ô∏è‚É£  EXECU√á√ÉO INDIVIDUAL:"
echo "   # Instalar Docker"
echo "   ./scripts/scripts-dev/01-instalar-docker.sh"
echo "   "
echo "   # Configurar projeto"
echo "   ./scripts/scripts-dev/02-configurar-projeto.sh"
echo "   "
echo "   # Subir ambiente"
echo "   ./scripts/scripts-dev/04-subir-ambiente.sh dev"
echo "   "
echo "   # Testar acesso"
echo "   ./scripts/scripts-dev/05-testar-acesso.sh dev"
echo "   "
echo "   # Fazer backup"
echo "   ./scripts/scripts-dev/06-backup-local.sh dev"
echo "   "
echo "   # Checklist final"
echo "   ./scripts/scripts-dev/10-checklist-final.sh dev"
echo ""

echo "üìä O QUE CADA SCRIPT FAZ:"
echo "========================"
echo ""

echo "üîß CONFIGURA√á√ÉO:"
echo "   - 01-instalar-docker.sh: Instala Docker e Docker Compose"
echo "   - 02-configurar-projeto.sh: Configura .env, SSL e estrutura"
echo "   - 03-verificar-compose.sh: Valida arquivos docker-compose"
echo ""

echo "üöÄ EXECU√á√ÉO:"
echo "   - 04-subir-ambiente.sh: Sobe containers e executa migra√ß√µes"
echo "   - 05-testar-acesso.sh: Testa conectividade e endpoints"
echo ""

echo "üíæ BACKUP:"
echo "   - 06-backup-local.sh: Cria backup completo (banco + m√≠dia)"
echo "   - 07-restore-local.sh: Restaura backup e testa integridade"
echo ""

echo "üßπ MANUTEN√á√ÉO:"
echo "   - 08-limpeza-sistema.sh: Limpa logs, imagens e volumes"
echo "   - 09-testes-falha.sh: Testa resili√™ncia do sistema"
echo "   - 10-checklist-final.sh: Checklist completo automatizado"
echo ""

echo "üéØ SCRIPT PRINCIPAL:"
echo "   - testa-tudo.sh: Executa todos os testes em sequ√™ncia"
echo ""

echo "üîß TROUBLESHOOTING:"
echo "=================="
echo ""

echo "‚ùå PROBLEMAS COMUNS:"
echo "   - Docker n√£o instalado: Execute 01-instalar-docker.sh"
echo "   - Arquivo .env n√£o existe: Execute 02-configurar-projeto.sh"
echo "   - Containers n√£o sobem: Execute 03-verificar-compose.sh"
echo "   - Portas em uso: Verifique com netstat -tuln"
echo "   - Permiss√µes: Execute chmod +x scripts/scripts-dev/*.sh"
echo ""

echo "üìã LOGS √öTEIS:"
echo "   - docker-compose -f docker-compose.dev.yml logs -f"
echo "   - docker-compose -f docker-compose.dev.yml logs backend"
echo "   - docker-compose -f docker-compose.dev.yml ps"
echo ""

echo "üîê SEGURAN√áA:"
echo "============"
echo ""

echo "‚ö†Ô∏è  CONFIGURA√á√ïES IMPORTANTES:"
echo "   - Configure SECRET_KEY forte no .env"
echo "   - Use senhas fortes para POSTGRES_PASSWORD"
echo "   - Configure DJANGO_SUPERUSER_PASSWORD"
echo "   - Mantenha .env com permiss√µes restritas (chmod 600)"
echo ""

echo "ü§ñ AUTOMA√á√ÉO:"
echo "============"
echo ""

echo "üìÖ CRONTAB PARA BACKUPS:"
echo "   # Backup di√°rio √†s 2h"
echo "   0 2 * * * /caminho/para/projeto/scripts/scripts-dev/06-backup-local.sh prod"
echo "   "
echo "   # Limpeza semanal aos domingos √†s 3h"
echo "   0 3 * * 0 /caminho/para/projeto/scripts/scripts-dev/08-limpeza-sistema.sh prod"
echo "   "
echo "   # Checklist semanal √†s segundas √†s 6h"
echo "   0 6 * * 1 /caminho/para/projeto/scripts/scripts-dev/10-checklist-final.sh prod"
echo ""

echo "üìä RELAT√ìRIOS:"
echo "============="
echo ""

echo "üìÑ RELAT√ìRIOS GERADOS:"
echo "   - teste_completo_[ambiente]_[data].txt"
echo "   - backups/[ambiente]/backup_[ambiente]_[data]_complete.tar.gz"
echo "   - Logs detalhados em cada script"
echo ""

echo "üéØ RESULTADOS ESPERADOS:"
echo "======================="
echo ""

echo "‚úÖ SUCESSO (100%):"
echo "   - Todos os testes passaram"
echo "   - Sistema pronto para produ√ß√£o"
echo "   - Pode prosseguir com confian√ßa"
echo ""

echo "‚ö†Ô∏è  ATEN√á√ÉO (80-99%):"
echo "   - Maioria dos testes passou"
echo "   - Sistema est√°vel para uso"
echo "   - Revise os itens que falharam"
echo ""

echo "‚ùå PROBLEMAS (60-79%):"
echo "   - Alguns testes falharam"
echo "   - Corrija os problemas antes de usar"
echo "   - Execute os testes novamente"
echo ""

echo "üö® CR√çTICO (<60%):"
echo "   - Muitos testes falharam"
echo "   - Corrija os problemas cr√≠ticos"
echo "   - Verifique configura√ß√µes b√°sicas"
echo ""

echo "üí° DICAS IMPORTANTES:"
echo "===================="
echo ""

echo "üéØ PARA DESENVOLVEDORES J√öNIOR:"
echo "   1. Execute testa-tudo.sh primeiro"
echo "   2. Leia as mensagens de erro cuidadosamente"
echo "   3. Use o README.md para troubleshooting"
echo "   4. Execute scripts individuais se necess√°rio"
echo "   5. Mantenha backups regulares"
echo ""

echo "üîß PARA DEVS MAIS EXPERIENTES:"
echo "   1. Personalize scripts conforme necess√°rio"
echo "   2. Configure automa√ß√£o com crontab"
echo "   3. Monitore logs e performance"
echo "   4. Configure alertas autom√°ticos"
echo "   5. Documente mudan√ßas importantes"
echo ""

echo "üöÄ PR√ìXIMOS PASSOS:"
echo "=================="
echo ""

echo "1Ô∏è‚É£  EXECUTE O TESTE COMPLETO:"
echo "   ./scripts/scripts-dev/testa-tudo.sh dev"
echo ""

echo "2Ô∏è‚É£  CONFIGURE AUTOMA√á√ÉO:"
echo "   - Adicione scripts ao crontab"
echo "   - Configure monitoramento cont√≠nuo"
echo "   - Configure alertas de disco"
echo ""

echo "3Ô∏è‚É£  MONITORE REGULARMENTE:"
echo "   - Execute checklist semanal"
echo "   - Fa√ßa backups regulares"
echo "   - Verifique logs de erro"
echo ""

echo "4Ô∏è‚É£  DOCUMENTE MUDAN√áAS:"
echo "   - Mantenha README atualizado"
echo "   - Documente configura√ß√µes especiais"
echo "   - Registre problemas e solu√ß√µes"
echo ""

echo "üéâ SISTEMA PRONTO!"
echo "=================="
echo ""

echo "‚úÖ Todos os scripts foram criados com sucesso"
echo "‚úÖ Permiss√µes de execu√ß√£o configuradas"
echo "‚úÖ Documenta√ß√£o completa dispon√≠vel"
echo "‚úÖ Sistema pronto para testes automatizados"
echo ""

echo "üìû SUPORTE:"
echo "   - Consulte README.md para troubleshooting"
echo "   - Execute 10-checklist-final.sh para diagn√≥stico"
echo "   - Verifique logs com docker-compose logs"
echo ""

echo "üöÄ BOA SORTE COM SEU PROJETO!"
echo "==============================" 