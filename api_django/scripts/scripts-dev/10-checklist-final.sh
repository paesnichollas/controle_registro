#!/bin/bash

# =============================================================================
# SCRIPT: 10-checklist-final.sh
# DESCRI√á√ÉO: Checklist final automatizado para verificar todos os itens
# USO: ./10-checklist-final.sh [dev|prod]
# AUTOR: Sistema de Automa√ß√£o
# =============================================================================

set -e  # Para o script se houver erro

# Verificar argumento
ENVIRONMENT=${1:-dev}

if [[ ! "$ENVIRONMENT" =~ ^(dev|prod)$ ]]; then
    echo "‚ùå ERRO: Ambiente deve ser 'dev' ou 'prod'"
    echo "   Uso: ./10-checklist-final.sh [dev|prod]"
    exit 1
fi

echo "üìã CHECKLIST FINAL AUTOMATIZADO - AMBIENTE $ENVIRONMENT..."
echo "=========================================================="

# Definir arquivo compose baseado no ambiente
if [ "$ENVIRONMENT" = "dev" ]; then
    COMPOSE_FILE="docker-compose.dev.yml"
    FRONTEND_URL="http://localhost:5173"
    BACKEND_URL="http://localhost:8000"
else
    COMPOSE_FILE="docker-compose.yml"
    FRONTEND_URL="http://localhost"
    BACKEND_URL="http://localhost:8000"
fi

# Arrays para armazenar resultados
PASSED_CHECKS=()
FAILED_CHECKS=()
WARNING_CHECKS=()

# Fun√ß√£o para adicionar resultado
add_result() {
    local status=$1
    local message=$2
    
    case $status in
        "PASS")
            PASSED_CHECKS+=("$message")
            echo "‚úÖ $message"
            ;;
        "FAIL")
            FAILED_CHECKS+=("$message")
            echo "‚ùå $message"
            ;;
        "WARN")
            WARNING_CHECKS+=("$message")
            echo "‚ö†Ô∏è  $message"
            ;;
    esac
}

# Fun√ß√£o para testar URL
test_url() {
    local url=$1
    local description=$2
    local timeout=10
    
    if curl -s --max-time $timeout "$url" >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

echo ""
echo "üîç INICIANDO VERIFICA√á√ïES..."
echo "============================="

# 1. VERIFICA√á√ïES DE INFRAESTRUTURA
echo ""
echo "üèóÔ∏è  VERIFICA√á√ïES DE INFRAESTRUTURA"
echo "=================================="

# Docker instalado
if command -v docker &> /dev/null; then
    add_result "PASS" "Docker instalado"
else
    add_result "FAIL" "Docker n√£o instalado"
fi

# Docker Compose instalado
if command -v docker-compose &> /dev/null; then
    add_result "PASS" "Docker Compose instalado"
else
    add_result "FAIL" "Docker Compose n√£o instalado"
fi

# Docker funcionando
if docker info >/dev/null 2>&1; then
    add_result "PASS" "Docker funcionando"
else
    add_result "FAIL" "Docker n√£o funcionando"
fi

# Arquivo compose existe
if [ -f "$COMPOSE_FILE" ]; then
    add_result "PASS" "Arquivo $COMPOSE_FILE existe"
else
    add_result "FAIL" "Arquivo $COMPOSE_FILE n√£o existe"
fi

# 2. VERIFICA√á√ïES DE CONFIGURA√á√ÉO
echo ""
echo "üîß VERIFICA√á√ïES DE CONFIGURA√á√ÉO"
echo "================================"

# Arquivo .env existe
if [ -f ".env" ]; then
    add_result "PASS" "Arquivo .env existe"
else
    add_result "FAIL" "Arquivo .env n√£o existe"
fi

# Vari√°veis cr√≠ticas configuradas
if [ -f ".env" ]; then
    critical_vars=("SECRET_KEY" "POSTGRES_PASSWORD" "DJANGO_SUPERUSER_PASSWORD")
    for var in "${critical_vars[@]}"; do
        if grep -q "^$var=" .env; then
            value=$(grep "^$var=" .env | cut -d'=' -f2)
            if [ -n "$value" ] && [ "$value" != "your-secret-key-here-change-in-production" ]; then
                add_result "PASS" "$var configurada"
            else
                add_result "WARN" "$var precisa ser configurada"
            fi
        else
            add_result "FAIL" "$var n√£o encontrada"
        fi
    done
fi

# Certificados SSL
if [ -f "nginx/ssl/nginx.crt" ] && [ -f "nginx/ssl/nginx.key" ]; then
    add_result "PASS" "Certificados SSL existem"
else
    add_result "WARN" "Certificados SSL n√£o encontrados"
fi

# 3. VERIFICA√á√ïES DE CONTAINERS
echo ""
echo "üì¶ VERIFICA√á√ïES DE CONTAINERS"
echo "=============================="

# Containers rodando
if docker-compose -f "$COMPOSE_FILE" ps | grep -q "Up"; then
    add_result "PASS" "Containers est√£o rodando"
else
    add_result "FAIL" "Containers n√£o est√£o rodando"
fi

# Verificar cada servi√ßo
services=$(docker-compose -f "$COMPOSE_FILE" config --services)
for service in $services; do
    if docker-compose -f "$COMPOSE_FILE" ps -q "$service" >/dev/null 2>&1; then
        container_status=$(docker inspect --format='{{.State.Status}}' "$(docker-compose -f "$COMPOSE_FILE" ps -q "$service")" 2>/dev/null || echo "unknown")
        if [ "$container_status" = "running" ]; then
            add_result "PASS" "Servi√ßo $service est√° rodando"
        else
            add_result "FAIL" "Servi√ßo $service n√£o est√° rodando ($container_status)"
        fi
    else
        add_result "FAIL" "Servi√ßo $service n√£o encontrado"
    fi
done

# 4. VERIFICA√á√ïES DE CONECTIVIDADE
echo ""
echo "üåê VERIFICA√á√ïES DE CONECTIVIDADE"
echo "================================"

# Frontend acess√≠vel
if test_url "$FRONTEND_URL" "Frontend"; then
    add_result "PASS" "Frontend acess√≠vel"
else
    add_result "FAIL" "Frontend n√£o acess√≠vel"
fi

# Backend acess√≠vel
if test_url "$BACKEND_URL" "Backend"; then
    add_result "PASS" "Backend acess√≠vel"
else
    add_result "FAIL" "Backend n√£o acess√≠vel"
fi

# Admin Django acess√≠vel
if test_url "$BACKEND_URL/admin" "Admin Django"; then
    add_result "PASS" "Admin Django acess√≠vel"
else
    add_result "FAIL" "Admin Django n√£o acess√≠vel"
fi

# 5. VERIFICA√á√ïES DE BANCO DE DADOS
echo ""
echo "üóÑÔ∏è  VERIFICA√á√ïES DE BANCO DE DADOS"
echo "==================================="

# Banco acess√≠vel
if docker-compose -f "$COMPOSE_FILE" ps -q db >/dev/null 2>&1; then
    if docker-compose -f "$COMPOSE_FILE" exec -T db pg_isready -U postgres >/dev/null 2>&1; then
        add_result "PASS" "Banco de dados acess√≠vel"
    else
        add_result "FAIL" "Banco de dados n√£o acess√≠vel"
    fi
else
    add_result "FAIL" "Container do banco n√£o encontrado"
fi

# Migra√ß√µes aplicadas
if docker-compose -f "$COMPOSE_FILE" ps -q backend >/dev/null 2>&1; then
    if docker-compose -f "$COMPOSE_FILE" exec -T backend python manage.py showmigrations --list | grep -q "\[X\]"; then
        add_result "PASS" "Migra√ß√µes aplicadas"
    else
        add_result "WARN" "Migra√ß√µes n√£o aplicadas"
    fi
else
    add_result "FAIL" "Container backend n√£o encontrado"
fi

# 6. VERIFICA√á√ïES DE BACKUP
echo ""
echo "üíæ VERIFICA√á√ïES DE BACKUP"
echo "=========================="

# Diret√≥rio de backup existe
backup_dir="backups/$ENVIRONMENT"
if [ -d "$backup_dir" ]; then
    add_result "PASS" "Diret√≥rio de backup existe"
else
    add_result "WARN" "Diret√≥rio de backup n√£o existe"
fi

# Backups existem
if [ -d "$backup_dir" ]; then
    backup_count=$(ls -1 "$backup_dir"/*_complete.tar.gz 2>/dev/null | wc -l)
    if [ "$backup_count" -gt 0 ]; then
        add_result "PASS" "$backup_count backup(s) encontrado(s)"
    else
        add_result "WARN" "Nenhum backup encontrado"
    fi
else
    add_result "WARN" "N√£o foi poss√≠vel verificar backups"
fi

# 7. VERIFICA√á√ïES DE SEGURAN√áA
echo ""
echo "üîê VERIFICA√á√ïES DE SEGURAN√áA"
echo "============================="

# Usu√°rio no grupo docker
if groups $USER | grep -q docker; then
    add_result "PASS" "Usu√°rio no grupo docker"
else
    add_result "WARN" "Usu√°rio n√£o est√° no grupo docker"
fi

# Permiss√µes de arquivos
if [ -r ".env" ]; then
    add_result "PASS" "Arquivo .env leg√≠vel"
else
    add_result "FAIL" "Arquivo .env n√£o leg√≠vel"
fi

# 8. VERIFICA√á√ïES DE PERFORMANCE
echo ""
echo "‚ö° VERIFICA√á√ïES DE PERFORMANCE"
echo "=============================="

# Espa√ßo em disco
disk_usage=$(df -h . | awk 'NR==2 {print $5}' | sed 's/%//')
if [ "$disk_usage" -lt 80 ]; then
    add_result "PASS" "Espa√ßo em disco OK ($disk_usage%)"
elif [ "$disk_usage" -lt 90 ]; then
    add_result "WARN" "Pouco espa√ßo em disco ($disk_usage%)"
else
    add_result "FAIL" "Disco quase cheio ($disk_usage%)"
fi

# Tempo de resposta
frontend_time=$(curl -s -w "%{time_total}" -o /dev/null "$FRONTEND_URL" 2>/dev/null || echo "0")
if (( $(echo "$frontend_time < 5" | bc -l) )); then
    add_result "PASS" "Frontend r√°pido (${frontend_time}s)"
else
    add_result "WARN" "Frontend lento (${frontend_time}s)"
fi

backend_time=$(curl -s -w "%{time_total}" -o /dev/null "$BACKEND_URL" 2>/dev/null || echo "0")
if (( $(echo "$backend_time < 3" | bc -l) )); then
    add_result "PASS" "Backend r√°pido (${backend_time}s)"
else
    add_result "WARN" "Backend lento (${backend_time}s)"
fi

# 9. VERIFICA√á√ïES DE LOGS
echo ""
echo "üìã VERIFICA√á√ïES DE LOGS"
echo "========================"

# Logs de erro
error_logs=$(docker-compose -f "$COMPOSE_FILE" logs --tail=100 2>&1 | grep -i "error\|exception\|fail" | wc -l)
if [ "$error_logs" -eq 0 ]; then
    add_result "PASS" "Nenhum erro nos logs recentes"
elif [ "$error_logs" -lt 5 ]; then
    add_result "WARN" "$error_logs erro(s) nos logs recentes"
else
    add_result "FAIL" "$error_logs erro(s) nos logs recentes"
fi

# 10. VERIFICA√á√ïES DE REDE
echo ""
echo "üåê VERIFICA√á√ïES DE REDE"
echo "========================"

# Portas em uso
ports=(80 8000 5432 6379 5173)
for port in "${ports[@]}"; do
    if netstat -tuln 2>/dev/null | grep -q ":$port "; then
        add_result "PASS" "Porta $port est√° em uso"
    else
        add_result "WARN" "Porta $port n√£o est√° em uso"
    fi
done

# 11. RESUMO FINAL
echo ""
echo "üìä RESUMO DO CHECKLIST"
echo "======================"

total_checks=$((${#PASSED_CHECKS[@]} + ${#FAILED_CHECKS[@]} + ${#WARNING_CHECKS[@]}))
passed_count=${#PASSED_CHECKS[@]}
failed_count=${#FAILED_CHECKS[@]}
warning_count=${#WARNING_CHECKS[@]}

echo ""
echo "üìà ESTAT√çSTICAS:"
echo "   Total de verifica√ß√µes: $total_checks"
echo "   ‚úÖ Passou: $passed_count"
echo "   ‚ùå Falhou: $failed_count"
echo "   ‚ö†Ô∏è  Aviso: $warning_count"

# Calcular percentual de sucesso
if [ $total_checks -gt 0 ]; then
    success_rate=$((passed_count * 100 / total_checks))
    echo "   üìä Taxa de sucesso: ${success_rate}%"
else
    success_rate=0
    echo "   üìä Taxa de sucesso: 0%"
fi

echo ""
echo "üìã RESULTADOS DETALHADOS:"
echo "========================="

if [ ${#FAILED_CHECKS[@]} -gt 0 ]; then
    echo ""
    echo "‚ùå FALHAS CR√çTICAS:"
    for check in "${FAILED_CHECKS[@]}"; do
        echo "   - $check"
    done
fi

if [ ${#WARNING_CHECKS[@]} -gt 0 ]; then
    echo ""
    echo "‚ö†Ô∏è  AVISOS:"
    for check in "${WARNING_CHECKS[@]}"; do
        echo "   - $check"
    done
fi

echo ""
echo "üéØ RECOMENDA√á√ïES:"
echo "=================="

if [ $failed_count -gt 0 ]; then
    echo "‚ùå CORRIJA AS FALHAS CR√çTICAS ANTES DE PROSSEGUIR"
    echo "   - Execute os scripts de corre√ß√£o indicados"
    echo "   - Verifique logs e configura√ß√µes"
    echo "   - Teste novamente ap√≥s corre√ß√µes"
elif [ $warning_count -gt 0 ]; then
    echo "‚ö†Ô∏è  ATEN√á√ÉO AOS AVISOS"
    echo "   - Considere corrigir os avisos para melhor performance"
    echo "   - Alguns avisos podem ser ignorados em desenvolvimento"
    echo "‚úÖ SISTEMA PRONTO PARA PRODU√á√ÉO"
else
    echo "üéâ PERFEITO! SISTEMA 100% FUNCIONAL"
    echo "   - Todos os testes passaram"
    echo "   - Sistema pronto para produ√ß√£o"
    echo "   - Pode prosseguir com confian√ßa"
fi

echo ""
echo "üîß PR√ìXIMOS PASSOS:"
echo "==================="

if [ $failed_count -gt 0 ]; then
    echo "1. Corrija as falhas cr√≠ticas"
    echo "2. Execute este checklist novamente"
    echo "3. Teste funcionalidades espec√≠ficas"
elif [ $success_rate -ge 80 ]; then
    echo "1. Sistema est√° pronto para uso"
    echo "2. Monitore logs regularmente"
    echo "3. Fa√ßa backups peri√≥dicos"
    echo "4. Configure alertas de monitoramento"
else
    echo "1. Revise os avisos"
    echo "2. Otimize configura√ß√µes"
    echo "3. Execute testes de stress"
fi

echo ""
echo "üí° DICAS FINAIS:"
echo "================"
echo "   - Execute este checklist regularmente"
echo "   - Mantenha backups atualizados"
echo "   - Monitore logs e performance"
echo "   - Configure alertas autom√°ticos"
echo "   - Documente mudan√ßas importantes"

echo ""
echo "üöÄ CHECKLIST FINALIZADO!"
echo "========================" 