#!/bin/bash

# =============================================================================
# SCRIPT: 05-check-debug-env.sh
# DESCRI√á√ÉO: Verifica DEBUG=False e vari√°veis essenciais no .env em produ√ß√£o
# AUTOR: Sistema de Automa√ß√£o
# DATA: $(date +%Y-%m-%d)
# USO: ./05-check-debug-env.sh [--fix] [--backup]
# =============================================================================

set -euo pipefail

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configura√ß√µes
ENV_FILE=".env"
ENV_EXAMPLE="env.example"
BACKUP_DIR="/backups/env"

# Vari√°veis essenciais que devem estar presentes
ESSENTIAL_VARS=(
    "POSTGRES_DB"
    "POSTGRES_USER"
    "POSTGRES_PASSWORD"
    "DEBUG"
    "SECRET_KEY"
    "ALLOWED_HOSTS"
)

# Vari√°veis que devem ser seguras em produ√ß√£o
SECURE_VARS=(
    "SECRET_KEY"
    "POSTGRES_PASSWORD"
    "EMAIL_HOST_PASSWORD"
)

# Fun√ß√£o para imprimir mensagens coloridas
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}[$(date '+%Y-%m-%d %H:%M:%S')] ${message}${NC}"
}

# Fun√ß√£o para verificar se o arquivo .env existe
check_env_file() {
    print_message $BLUE "üìÑ Verificando arquivo .env..."
    
    if [[ ! -f "$ENV_FILE" ]]; then
        print_message $RED "‚ùå ERRO: Arquivo .env n√£o encontrado!"
        
        if [[ -f "$ENV_EXAMPLE" ]]; then
            print_message $YELLOW "üí° Sugest√£o: Copie o arquivo de exemplo:"
            echo "   cp $ENV_EXAMPLE $ENV_FILE"
            echo "   nano $ENV_FILE  # Edite as vari√°veis"
        fi
        return 1
    fi
    
    print_message $GREEN "‚úÖ Arquivo .env encontrado"
    return 0
}

# Fun√ß√£o para verificar se DEBUG est√° False
check_debug_setting() {
    print_message $BLUE "üîç Verificando configura√ß√£o DEBUG..."
    
    if [[ ! -f "$ENV_FILE" ]]; then
        print_message $RED "‚ùå Arquivo .env n√£o encontrado"
        return 1
    fi
    
    # Busca a linha DEBUG no arquivo
    local debug_line=$(grep -i "^DEBUG=" "$ENV_FILE" || echo "")
    
    if [[ -z "$debug_line" ]]; then
        print_message $RED "‚ùå ERRO: Vari√°vel DEBUG n√£o encontrada no .env"
        return 1
    fi
    
    # Extrai o valor
    local debug_value=$(echo "$debug_line" | cut -d'=' -f2 | tr -d ' ')
    
    if [[ "$debug_value" == "True" || "$debug_value" == "true" ]]; then
        print_message $RED "üö® ALERTA CR√çTICO: DEBUG=True em produ√ß√£o!"
        print_message $YELLOW "üí° Isso pode expor informa√ß√µes sens√≠veis"
        return 1
    elif [[ "$debug_value" == "False" || "$debug_value" == "false" ]]; then
        print_message $GREEN "‚úÖ DEBUG=False (configura√ß√£o segura)"
        return 0
    else
        print_message $YELLOW "‚ö†Ô∏è  Valor DEBUG inv√°lido: $debug_value"
        return 1
    fi
}

# Fun√ß√£o para verificar vari√°veis essenciais
check_essential_vars() {
    print_message $BLUE "üîß Verificando vari√°veis essenciais..."
    
    if [[ ! -f "$ENV_FILE" ]]; then
        print_message $RED "‚ùå Arquivo .env n√£o encontrado"
        return 1
    fi
    
    local missing_vars=()
    local empty_vars=()
    
    for var in "${ESSENTIAL_VARS[@]}"; do
        local line=$(grep -i "^${var}=" "$ENV_FILE" || echo "")
        
        if [[ -z "$line" ]]; then
            missing_vars+=("$var")
        else
            local value=$(echo "$line" | cut -d'=' -f2 | tr -d ' ')
            if [[ -z "$value" || "$value" == "" ]]; then
                empty_vars+=("$var")
            fi
        fi
    done
    
    # Reporta vari√°veis faltantes
    if [[ ${#missing_vars[@]} -gt 0 ]]; then
        print_message $RED "‚ùå Vari√°veis faltando: ${missing_vars[*]}"
    fi
    
    # Reporta vari√°veis vazias
    if [[ ${#empty_vars[@]} -gt 0 ]]; then
        print_message $YELLOW "‚ö†Ô∏è  Vari√°veis vazias: ${empty_vars[*]}"
    fi
    
    # Verifica se todas est√£o presentes e preenchidas
    if [[ ${#missing_vars[@]} -eq 0 && ${#empty_vars[@]} -eq 0 ]]; then
        print_message $GREEN "‚úÖ Todas as vari√°veis essenciais est√£o configuradas"
        return 0
    else
        return 1
    fi
}

# Fun√ß√£o para verificar seguran√ßa das vari√°veis
check_security_vars() {
    print_message $BLUE "üîê Verificando seguran√ßa das vari√°veis..."
    
    if [[ ! -f "$ENV_FILE" ]]; then
        print_message $RED "‚ùå Arquivo .env n√£o encontrado"
        return 1
    fi
    
    local security_issues=()
    
    for var in "${SECURE_VARS[@]}"; do
        local line=$(grep -i "^${var}=" "$ENV_FILE" || echo "")
        
        if [[ -n "$line" ]]; then
            local value=$(echo "$line" | cut -d'=' -f2 | tr -d ' ')
            
            # Verifica se o valor √© muito simples
            if [[ "$value" == "default" || "$value" == "password" || "$value" == "secret" ]]; then
                security_issues+=("$var (valor muito simples)")
            fi
            
            # Verifica se SECRET_KEY √© muito curto
            if [[ "$var" == "SECRET_KEY" && ${#value} -lt 20 ]]; then
                security_issues+=("$var (muito curto)")
            fi
        fi
    done
    
    if [[ ${#security_issues[@]} -gt 0 ]]; then
        print_message $YELLOW "‚ö†Ô∏è  Problemas de seguran√ßa encontrados:"
        for issue in "${security_issues[@]}"; do
            print_message $YELLOW "   - $issue"
        done
        return 1
    else
        print_message $GREEN "‚úÖ Vari√°veis de seguran√ßa OK"
        return 0
    fi
}

# Fun√ß√£o para verificar ALLOWED_HOSTS
check_allowed_hosts() {
    print_message $BLUE "üåê Verificando ALLOWED_HOSTS..."
    
    if [[ ! -f "$ENV_FILE" ]]; then
        print_message $RED "‚ùå Arquivo .env n√£o encontrado"
        return 1
    fi
    
    local allowed_hosts_line=$(grep -i "^ALLOWED_HOSTS=" "$ENV_FILE" || echo "")
    
    if [[ -z "$allowed_hosts_line" ]]; then
        print_message $RED "‚ùå ALLOWED_HOSTS n√£o configurado"
        return 1
    fi
    
    local allowed_hosts_value=$(echo "$allowed_hosts_line" | cut -d'=' -f2 | tr -d ' ')
    
    # Verifica se cont√©m localhost ou *
    if [[ "$allowed_hosts_value" == "*" ]]; then
        print_message $RED "üö® ALERTA: ALLOWED_HOSTS=* (muito permissivo)"
        return 1
    elif [[ "$allowed_hosts_value" == "localhost,127.0.0.1" ]]; then
        print_message $YELLOW "‚ö†Ô∏è  ALLOWED_HOSTS apenas localhost (pode n√£o funcionar em produ√ß√£o)"
        return 1
    else
        print_message $GREEN "‚úÖ ALLOWED_HOSTS configurado adequadamente"
        return 0
    fi
}

# Fun√ß√£o para verificar permiss√µes do arquivo .env
check_env_permissions() {
    print_message $BLUE "üîí Verificando permiss√µes do arquivo .env..."
    
    if [[ ! -f "$ENV_FILE" ]]; then
        print_message $RED "‚ùå Arquivo .env n√£o encontrado"
        return 1
    fi
    
    local permissions=$(stat -c %a "$ENV_FILE")
    local owner=$(stat -c %U "$ENV_FILE")
    
    print_message $BLUE "üìä Permiss√µes: $permissions, Propriet√°rio: $owner"
    
    # Verifica se as permiss√µes s√£o muito abertas
    if [[ "$permissions" == "666" || "$permissions" == "777" ]]; then
        print_message $RED "üö® ALERTA: Permiss√µes muito abertas ($permissions)"
        return 1
    elif [[ "$permissions" == "644" || "$permissions" == "600" ]]; then
        print_message $GREEN "‚úÖ Permiss√µes adequadas ($permissions)"
        return 0
    else
        print_message $YELLOW "‚ö†Ô∏è  Permiss√µes n√£o ideais ($permissions)"
        return 1
    fi
}

# Fun√ß√£o para fazer backup do .env
backup_env_file() {
    if [[ "${2:-}" == "--backup" ]]; then
        print_message $BLUE "üíæ Fazendo backup do arquivo .env..."
        
        if [[ ! -f "$ENV_FILE" ]]; then
            print_message $RED "‚ùå Arquivo .env n√£o encontrado para backup"
            return 1
        fi
        
        # Cria diret√≥rio de backup se n√£o existir
        mkdir -p "$BACKUP_DIR"
        
        local timestamp=$(date +%Y%m%d_%H%M%S)
        local backup_file="$BACKUP_DIR/.env.backup_$timestamp"
        
        cp "$ENV_FILE" "$backup_file"
        print_message $GREEN "‚úÖ Backup salvo em: $backup_file"
        
        # Criptografa o backup se poss√≠vel
        if command -v gpg >/dev/null 2>&1; then
            gpg --encrypt --recipient "$(whoami)" "$backup_file" 2>/dev/null && \
            rm "$backup_file" && \
            print_message $GREEN "‚úÖ Backup criptografado: $backup_file.gpg"
        fi
    fi
}

# Fun√ß√£o para corrigir problemas automaticamente
fix_issues() {
    if [[ "${1:-}" == "--fix" ]]; then
        print_message $BLUE "üîß Tentando corrigir problemas automaticamente..."
        
        if [[ ! -f "$ENV_FILE" ]]; then
            print_message $RED "‚ùå Arquivo .env n√£o encontrado"
            return 1
        fi
        
        local fixed=0
        
        # Corrige DEBUG=True
        if grep -q "^DEBUG=True" "$ENV_FILE"; then
            sed -i 's/^DEBUG=True/DEBUG=False/' "$ENV_FILE"
            print_message $GREEN "‚úÖ DEBUG corrigido para False"
            fixed=1
        fi
        
        # Corrige ALLOWED_HOSTS muito permissivo
        if grep -q "^ALLOWED_HOSTS=\*" "$ENV_FILE"; then
            sed -i 's/^ALLOWED_HOSTS=\*/ALLOWED_HOSTS=localhost,127.0.0.1,your-domain.com/' "$ENV_FILE"
            print_message $GREEN "‚úÖ ALLOWED_HOSTS corrigido"
            fixed=1
        fi
        
        # Corrige permiss√µes se muito abertas
        local permissions=$(stat -c %a "$ENV_FILE")
        if [[ "$permissions" == "666" || "$permissions" == "777" ]]; then
            chmod 600 "$ENV_FILE"
            print_message $GREEN "‚úÖ Permiss√µes corrigidas para 600"
            fixed=1
        fi
        
        if [[ "$fixed" -eq 1 ]]; then
            print_message $GREEN "‚úÖ Problemas corrigidos automaticamente"
        else
            print_message $YELLOW "‚ö†Ô∏è  Nenhum problema corrigido automaticamente"
        fi
    fi
}

# Fun√ß√£o para gerar relat√≥rio
generate_report() {
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local report_file="/tmp/env_check_report_$timestamp.txt"
    
    print_message $BLUE "üìä Gerando relat√≥rio de verifica√ß√£o..."
    
    {
        echo "=== RELAT√ìRIO DE VERIFICA√á√ÉO DO .ENV ==="
        echo "Data/Hora: $(date)"
        echo "Arquivo: $ENV_FILE"
        echo ""
        echo "=== CONFIGURA√á√ïES ATUAIS ==="
        if [[ -f "$ENV_FILE" ]]; then
            # Mostra configura√ß√µes sem expor senhas
            grep -v -i "password\|secret" "$ENV_FILE" | head -20
            echo "..."
        else
            echo "Arquivo .env n√£o encontrado"
        fi
        echo ""
        echo "=== PERMISS√ïES ==="
        if [[ -f "$ENV_FILE" ]]; then
            ls -la "$ENV_FILE"
        fi
        echo ""
        echo "=== SUGEST√ïES ==="
        echo "1. Sempre use DEBUG=False em produ√ß√£o"
        echo "2. Configure ALLOWED_HOSTS com dom√≠nios espec√≠ficos"
        echo "3. Use SECRET_KEY forte (m√≠nimo 50 caracteres)"
        echo "4. Mantenha permiss√µes 600 no arquivo .env"
        echo "5. Fa√ßa backup regular do arquivo .env"
    } > "$report_file"
    
    print_message $GREEN "‚úÖ Relat√≥rio salvo em: $report_file"
}

# Fun√ß√£o principal
main() {
    print_message $BLUE "üöÄ INICIANDO VERIFICA√á√ÉO DO ARQUIVO .ENV"
    echo
    
    # Verifica√ß√µes
    local overall_status=0
    
    check_env_file || overall_status=1
    echo
    check_debug_setting || overall_status=1
    echo
    check_essential_vars || overall_status=1
    echo
    check_security_vars || overall_status=1
    echo
    check_allowed_hosts || overall_status=1
    echo
    check_env_permissions || overall_status=1
    echo
    
    # Backup e corre√ß√µes
    backup_env_file "$@"
    echo
    fix_issues "$@"
    echo
    
    # Relat√≥rio final
    generate_report
    echo
    
    if [[ "$overall_status" -eq 0 ]]; then
        print_message $GREEN "‚úÖ TODAS AS VERIFICA√á√ïES PASSARAM!"
        print_message $BLUE "üîí Configura√ß√µes de seguran√ßa adequadas"
    else
        print_message $RED "‚ùå PROBLEMAS ENCONTRADOS!"
        print_message $YELLOW "üí° Revise as configura√ß√µes antes de prosseguir"
    fi
}

# Executa o script
main "$@" 