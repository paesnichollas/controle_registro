#!/bin/bash

# =============================================================================
# SCRIPT: 16-update-checklist.sh
# DESCRI√á√ÉO: Checklist de atualiza√ß√£o segura com backup, deploy e valida√ß√£o
# AUTOR: Sistema de Automa√ß√£o
# DATA: $(date +%Y-%m-%d)
# USO: ./16-update-checklist.sh [--auto] [--rollback] [--validate]
# =============================================================================

set -euo pipefail

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configura√ß√µes
COMPOSE_FILE="docker-compose.yml"
BACKUP_DIR="/backups"
LOG_FILE="/var/log/update_checklist.log"
ROLLBACK_POINT=""

# Endpoints para valida√ß√£o
VALIDATION_ENDPOINTS=(
    "http://localhost:8000/admin/"
    "http://localhost/"
    "http://localhost:8000/api/"
)

# Fun√ß√£o para imprimir mensagens coloridas
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}[$(date '+%Y-%m-%d %H:%M:%S')] ${message}${NC}"
}

# Fun√ß√£o para log
log_message() {
    local message="$1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $message" >> "$LOG_FILE"
}

# Fun√ß√£o para verificar depend√™ncias
check_dependencies() {
    print_message $BLUE "üîç Verificando depend√™ncias..."
    
    # Verifica Docker
    if ! command -v docker >/dev/null 2>&1; then
        print_message $RED "ERRO: Docker n√£o est√° instalado"
        exit 1
    fi
    
    # Verifica docker-compose
    if ! command -v docker-compose >/dev/null 2>&1; then
        print_message $RED "ERRO: docker-compose n√£o est√° instalado"
        exit 1
    fi
    
    # Verifica git
    if ! command -v git >/dev/null 2>&1; then
        print_message $RED "ERRO: Git n√£o est√° instalado"
        exit 1
    fi
    
    print_message $GREEN "‚úÖ Depend√™ncias verificadas"
}

# Fun√ß√£o para verificar status atual
check_current_status() {
    print_message $BLUE "üìä Verificando status atual..."
    
    # Verifica se h√° containers rodando
    local running_containers=$(docker-compose -f "$COMPOSE_FILE" ps --services --filter "status=running" | wc -l)
    
    if [[ "$running_containers" -eq 0 ]]; then
        print_message $YELLOW "‚ö†Ô∏è  Nenhum container rodando"
        return 1
    else
        print_message $GREEN "‚úÖ $running_containers containers rodando"
    fi
    
    # Verifica espa√ßo em disco
    local disk_usage=$(df -h / | awk 'NR==2 {print $5}' | cut -d'%' -f1)
    if [[ "$disk_usage" -gt 90 ]]; then
        print_message $RED "üö® ALERTA: Disco quase cheio ($disk_usage%)"
        return 1
    fi
    
    # Verifica conectividade de rede
    if ! ping -c 1 8.8.8.8 >/dev/null 2>&1; then
        print_message $RED "üö® ALERTA: Problema de conectividade de rede"
        return 1
    fi
    
    print_message $GREEN "‚úÖ Status atual OK"
    return 0
}

# Fun√ß√£o para fazer backup antes da atualiza√ß√£o
create_pre_update_backup() {
    print_message $BLUE "üíæ Criando backup antes da atualiza√ß√£o..."
    
    # Executa backup completo
    if [[ -f "scripts/02-backup-all.sh" ]]; then
        if ./scripts/02-backup-all.sh; then
            print_message $GREEN "‚úÖ Backup pr√©-atualiza√ß√£o criado"
            log_message "Backup pr√©-atualiza√ß√£o criado com sucesso"
        else
            print_message $RED "‚ùå Falha no backup pr√©-atualiza√ß√£o"
            return 1
        fi
    else
        print_message $YELLOW "‚ö†Ô∏è  Script de backup n√£o encontrado"
    fi
    
    # Salva estado atual dos containers
    docker-compose -f "$COMPOSE_FILE" ps > "/tmp/pre_update_containers_$(date +%Y%m%d_%H%M%S).txt"
    
    # Salva logs atuais
    docker-compose -f "$COMPOSE_FILE" logs > "/tmp/pre_update_logs_$(date +%Y%m%d_%H%M%S).txt"
}

# Fun√ß√£o para parar containers
stop_containers() {
    print_message $BLUE "üõë Parando containers..."
    
    if docker-compose -f "$COMPOSE_FILE" down; then
        print_message $GREEN "‚úÖ Containers parados"
        log_message "Containers parados com sucesso"
    else
        print_message $RED "‚ùå Falha ao parar containers"
        return 1
    fi
}

# Fun√ß√£o para atualizar c√≥digo
update_code() {
    print_message $BLUE "üì• Atualizando c√≥digo..."
    
    # Verifica se h√° mudan√ßas n√£o commitadas
    if [[ -n "$(git status --porcelain)" ]]; then
        print_message $YELLOW "‚ö†Ô∏è  H√° mudan√ßas n√£o commitadas:"
        git status --porcelain
        read -p "Deseja continuar? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_message $YELLOW "Atualiza√ß√£o cancelada pelo usu√°rio"
            return 1
        fi
    fi
    
    # Salva commit atual para rollback
    ROLLBACK_POINT=$(git rev-parse HEAD)
    print_message $BLUE "üìå Ponto de rollback: $ROLLBACK_POINT"
    
    # Puxa atualiza√ß√µes
    if git pull origin main; then
        print_message $GREEN "‚úÖ C√≥digo atualizado"
        log_message "C√≥digo atualizado com sucesso"
    else
        print_message $RED "‚ùå Falha ao atualizar c√≥digo"
        return 1
    fi
}

# Fun√ß√£o para reconstruir imagens
rebuild_images() {
    print_message $BLUE "üî® Reconstruindo imagens..."
    
    if docker-compose -f "$COMPOSE_FILE" build --no-cache; then
        print_message $GREEN "‚úÖ Imagens reconstru√≠das"
        log_message "Imagens reconstru√≠das com sucesso"
    else
        print_message $RED "‚ùå Falha ao reconstruir imagens"
        return 1
    fi
}

# Fun√ß√£o para subir containers
start_containers() {
    print_message $BLUE "üöÄ Subindo containers..."
    
    if docker-compose -f "$COMPOSE_FILE" up -d; then
        print_message $GREEN "‚úÖ Containers iniciados"
        log_message "Containers iniciados com sucesso"
    else
        print_message $RED "‚ùå Falha ao iniciar containers"
        return 1
    fi
    
    # Aguarda containers estarem prontos
    print_message $BLUE "‚è≥ Aguardando containers estarem prontos..."
    sleep 30
}

# Fun√ß√£o para validar endpoints
validate_endpoints() {
    print_message $BLUE "üß™ Validando endpoints..."
    
    local validation_failed=0
    
    for endpoint in "${VALIDATION_ENDPOINTS[@]}"; do
        print_message $BLUE "Testando: $endpoint"
        
        # Tenta v√°rias vezes
        local attempts=0
        local max_attempts=5
        
        while [[ $attempts -lt $max_attempts ]]; do
            if curl -f -s "$endpoint" >/dev/null 2>&1; then
                print_message $GREEN "‚úÖ $endpoint - OK"
                break
            else
                attempts=$((attempts + 1))
                if [[ $attempts -eq $max_attempts ]]; then
                    print_message $RED "‚ùå $endpoint - FALHOU ap√≥s $max_attempts tentativas"
                    validation_failed=1
                else
                    print_message $YELLOW "‚ö†Ô∏è  Tentativa $attempts/$max_attempts falhou, tentando novamente..."
                    sleep 5
                fi
            fi
        done
    done
    
    # Verifica logs por erros
    local error_logs=$(docker-compose -f "$COMPOSE_FILE" logs --tail=50 2>&1 | grep -i "error\|exception\|fatal" | wc -l)
    if [[ "$error_logs" -gt 5 ]]; then
        print_message $YELLOW "‚ö†Ô∏è  Muitos erros nos logs: $error_logs"
        validation_failed=1
    fi
    
    if [[ "$validation_failed" -eq 0 ]]; then
        print_message $GREEN "‚úÖ Todos os endpoints validados"
        log_message "Valida√ß√£o de endpoints bem-sucedida"
        return 0
    else
        print_message $RED "‚ùå Falha na valida√ß√£o de endpoints"
        log_message "Falha na valida√ß√£o de endpoints"
        return 1
    fi
}

# Fun√ß√£o para rollback
perform_rollback() {
    if [[ "${2:-}" == "--rollback" && -n "$ROLLBACK_POINT" ]]; then
        print_message $BLUE "üîÑ Executando rollback..."
        
        # Para containers
        docker-compose -f "$COMPOSE_FILE" down
        
        # Volta para o commit anterior
        if git reset --hard "$ROLLBACK_POINT"; then
            print_message $GREEN "‚úÖ C√≥digo revertido para: $ROLLBACK_POINT"
        else
            print_message $RED "‚ùå Falha ao reverter c√≥digo"
            return 1
        fi
        
        # Reconstr√≥i e sobe containers
        if docker-compose -f "$COMPOSE_FILE" build && docker-compose -f "$COMPOSE_FILE" up -d; then
            print_message $GREEN "‚úÖ Rollback conclu√≠do"
            log_message "Rollback executado com sucesso"
        else
            print_message $RED "‚ùå Falha no rollback"
            return 1
        fi
    fi
}

# Fun√ß√£o para valida√ß√£o p√≥s-atualiza√ß√£o
post_update_validation() {
    if [[ "${3:-}" == "--validate" ]]; then
        print_message $BLUE "üîç Valida√ß√£o p√≥s-atualiza√ß√£o..."
        
        # Verifica se todos os containers est√£o rodando
        local expected_containers=("db" "backend" "frontend")
        local running_containers=$(docker-compose -f "$COMPOSE_FILE" ps --services --filter "status=running")
        
        for container in "${expected_containers[@]}"; do
            if echo "$running_containers" | grep -q "$container"; then
                print_message $GREEN "‚úÖ Container $container rodando"
            else
                print_message $RED "‚ùå Container $container n√£o est√° rodando"
                return 1
            fi
        done
        
        # Testa conectividade do banco
        if docker-compose -f "$COMPOSE_FILE" exec -T db psql -U postgres -d controle_os -c "SELECT 1;" >/dev/null 2>&1; then
            print_message $GREEN "‚úÖ Conex√£o com banco OK"
        else
            print_message $RED "‚ùå Problema na conex√£o com banco"
            return 1
        fi
        
        # Verifica logs por erros cr√≠ticos
        local critical_errors=$(docker-compose -f "$COMPOSE_FILE" logs --tail=100 2>&1 | grep -i "critical\|fatal\|panic" | wc -l)
        if [[ "$critical_errors" -gt 0 ]]; then
            print_message $RED "‚ùå Erros cr√≠ticos encontrados: $critical_errors"
            return 1
        fi
        
        print_message $GREEN "‚úÖ Valida√ß√£o p√≥s-atualiza√ß√£o OK"
        return 0
    fi
}

# Fun√ß√£o para gerar relat√≥rio
generate_update_report() {
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local report_file="/tmp/update_report_$timestamp.txt"
    
    print_message $BLUE "üìä Gerando relat√≥rio de atualiza√ß√£o..."
    
    {
        echo "=== RELAT√ìRIO DE ATUALIZA√á√ÉO ==="
        echo "Data/Hora: $(date)"
        echo "Commit anterior: $ROLLBACK_POINT"
        echo "Commit atual: $(git rev-parse HEAD)"
        echo ""
        echo "=== STATUS DOS CONTAINERS ==="
        docker-compose -f "$COMPOSE_FILE" ps
        echo ""
        echo "=== LOGS RECENTES ==="
        docker-compose -f "$COMPOSE_FILE" logs --tail=20
        echo ""
        echo "=== ESPA√áO EM DISCO ==="
        df -h
        echo ""
        echo "=== VALIDA√á√ÉO DE ENDPOINTS ==="
        for endpoint in "${VALIDATION_ENDPOINTS[@]}"; do
            if curl -f -s "$endpoint" >/dev/null 2>&1; then
                echo "‚úÖ $endpoint"
            else
                echo "‚ùå $endpoint"
            fi
        done
    } > "$report_file"
    
    print_message $GREEN "‚úÖ Relat√≥rio salvo em: $report_file"
}

# Fun√ß√£o para modo autom√°tico
auto_update() {
    if [[ "${1:-}" == "--auto" ]]; then
        print_message $BLUE "ü§ñ MODO AUTOM√ÅTICO ATIVADO"
        
        # Executa todas as etapas automaticamente
        check_current_status || exit 1
        create_pre_update_backup || exit 1
        stop_containers || exit 1
        update_code || exit 1
        rebuild_images || exit 1
        start_containers || exit 1
        validate_endpoints || exit 1
        post_update_validation "$@" || exit 1
        generate_update_report
        
        print_message $GREEN "‚úÖ ATUALIZA√á√ÉO AUTOM√ÅTICA CONCLU√çDA!"
    fi
}

# Fun√ß√£o principal
main() {
    print_message $BLUE "üöÄ INICIANDO CHECKLIST DE ATUALIZA√á√ÉO SEGURA"
    echo
    
    # Verifica√ß√µes iniciais
    check_dependencies
    echo
    
    # Modo autom√°tico
    auto_update "$@"
    
    if [[ "${1:-}" != "--auto" ]]; then
        # Modo interativo
        print_message $BLUE "üìã CHECKLIST DE ATUALIZA√á√ÉO:"
        echo
        echo "1. ‚úÖ Verificar depend√™ncias"
        echo "2. üìä Verificar status atual"
        echo "3. üíæ Fazer backup pr√©-atualiza√ß√£o"
        echo "4. üõë Parar containers"
        echo "5. üì• Atualizar c√≥digo"
        echo "6. üî® Reconstruir imagens"
        echo "7. üöÄ Subir containers"
        echo "8. üß™ Validar endpoints"
        echo "9. üîç Valida√ß√£o p√≥s-atualiza√ß√£o"
        echo "10. üìä Gerar relat√≥rio"
        echo
        
        read -p "Deseja executar o checklist completo? (y/N): " -n 1 -r
        echo
        
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            check_current_status
            echo
            create_pre_update_backup
            echo
            stop_containers
            echo
            update_code
            echo
            rebuild_images
            echo
            start_containers
            echo
            validate_endpoints
            echo
            post_update_validation "$@"
            echo
            generate_update_report
            echo
            
            print_message $GREEN "‚úÖ CHECKLIST DE ATUALIZA√á√ÉO CONCLU√çDO!"
        else
            print_message $YELLOW "Checklist cancelado pelo usu√°rio"
        fi
    fi
    
    # Rollback se solicitado
    perform_rollback "$@"
}

# Executa o script
main "$@" 