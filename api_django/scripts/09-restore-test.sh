#!/bin/bash

# =============================================================================
# SCRIPT: 09-restore-test.sh
# DESCRI√á√ÉO: Teste de restore completo do banco e m√≠dia em ambiente limpo
# AUTOR: Sistema de Automa√ß√£o
# DATA: $(date +%Y-%m-%d)
# USO: ./09-restore-test.sh [backup_file] [--clean]
# =============================================================================

set -euo pipefail

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configura√ß√µes
BACKUP_DIR="/backups"
TEST_DIR="/tmp/restore_test_$(date +%Y%m%d_%H%M%S)"
COMPOSE_FILE="docker-compose.yml"
TEST_COMPOSE_FILE="$TEST_DIR/docker-compose.test.yml"

# Fun√ß√£o para imprimir mensagens coloridas
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}[$(date '+%Y-%m-%d %H:%M:%S')] ${message}${NC}"
}

# Fun√ß√£o para verificar depend√™ncias
check_dependencies() {
    print_message $BLUE "üîç Verificando depend√™ncias..."
    
    # Verifica Docker
    if ! command -v docker >/dev/null 2>&1; then
        print_message $RED "ERRO: Docker n√£o est√° instalado"
        exit 1
    fi
    
    # Verifica docker-compose
    if ! command -v docker-compose >/dev/null 2>&1; then
        print_message $RED "ERRO: docker-compose n√£o est√° instalado"
        exit 1
    fi
    
    # Verifica se h√° backups dispon√≠veis
    if [[ ! -d "$BACKUP_DIR" ]]; then
        print_message $RED "ERRO: Diret√≥rio de backup $BACKUP_DIR n√£o encontrado"
        exit 1
    fi
    
    print_message $GREEN "‚úÖ Depend√™ncias verificadas"
}

# Fun√ß√£o para selecionar arquivo de backup
select_backup_file() {
    local backup_file="$1"
    
    if [[ -n "$backup_file" ]]; then
        if [[ -f "$backup_file" ]]; then
            print_message $GREEN "‚úÖ Arquivo de backup selecionado: $backup_file"
            echo "$backup_file"
            return
        else
            print_message $RED "ERRO: Arquivo de backup n√£o encontrado: $backup_file"
            exit 1
        fi
    fi
    
    # Lista backups dispon√≠veis
    print_message $BLUE "üìã Backups dispon√≠veis:"
    local backups=($(find "$BACKUP_DIR" -name "*.sql" -o -name "*.tar.gz" | sort -r))
    
    if [[ ${#backups[@]} -eq 0 ]]; then
        print_message $RED "ERRO: Nenhum backup encontrado em $BACKUP_DIR"
        exit 1
    fi
    
    # Mostra os 10 backups mais recentes
    for i in "${!backups[@]}"; do
        if [[ $i -lt 10 ]]; then
            local filename=$(basename "${backups[$i]}")
            local size=$(du -h "${backups[$i]}" | cut -f1)
            local date=$(stat -c %y "${backups[$i]}" | cut -d' ' -f1)
            echo "$((i+1)). $filename ($size, $date)"
        fi
    done
    
    # Solicita sele√ß√£o
    read -p "Selecione o n√∫mero do backup (1-${#backups[@]}): " selection
    
    if [[ "$selection" =~ ^[0-9]+$ ]] && [[ $selection -ge 1 ]] && [[ $selection -le ${#backups[@]} ]]; then
        local selected_file="${backups[$((selection-1))]}"
        print_message $GREEN "‚úÖ Backup selecionado: $selected_file"
        echo "$selected_file"
    else
        print_message $RED "ERRO: Sele√ß√£o inv√°lida"
        exit 1
    fi
}

# Fun√ß√£o para preparar ambiente de teste
prepare_test_environment() {
    print_message $BLUE "üîß Preparando ambiente de teste..."
    
    # Cria diret√≥rio de teste
    mkdir -p "$TEST_DIR"
    print_message $GREEN "‚úÖ Diret√≥rio de teste criado: $TEST_DIR"
    
    # Copia arquivos necess√°rios
    cp "$COMPOSE_FILE" "$TEST_COMPOSE_FILE"
    cp .env "$TEST_DIR/.env" 2>/dev/null || print_message $YELLOW "‚ö†Ô∏è  Arquivo .env n√£o encontrado"
    
    # Modifica docker-compose para teste
    sed -i 's/8000:8000/8001:8000/g' "$TEST_COMPOSE_FILE"  # Muda porta
    sed -i 's/80:80/8080:80/g' "$TEST_COMPOSE_FILE"         # Muda porta frontend
    sed -i 's/5432:5432/5433:5432/g' "$TEST_COMPOSE_FILE"   # Muda porta banco
    
    print_message $GREEN "‚úÖ Ambiente de teste preparado"
}

# Fun√ß√£o para limpar ambiente anterior
clean_previous_test() {
    if [[ "${2:-}" == "--clean" ]]; then
        print_message $BLUE "üßπ Limpando testes anteriores..."
        
        # Para e remove containers de teste
        docker-compose -f "$TEST_COMPOSE_FILE" down -v 2>/dev/null || true
        
        # Remove volumes de teste
        docker volume ls --format "{{.Name}}" | grep "test" | xargs -r docker volume rm
        
        # Remove diret√≥rio de teste
        rm -rf "$TEST_DIR"
        
        print_message $GREEN "‚úÖ Limpeza conclu√≠da"
    fi
}

# Fun√ß√£o para restaurar banco de dados
restore_database() {
    local backup_file="$1"
    
    if [[ "$backup_file" == *.sql ]]; then
        print_message $BLUE "üóÑÔ∏è  Restaurando banco de dados..."
        
        # Inicia apenas o banco de dados
        cd "$TEST_DIR"
        docker-compose -f "$TEST_COMPOSE_FILE" up -d db
        
        # Aguarda banco estar pronto
        print_message $BLUE "‚è≥ Aguardando banco de dados estar pronto..."
        sleep 10
        
        # Restaura o backup
        if docker-compose -f "$TEST_COMPOSE_FILE" exec -T db psql -U postgres -c "DROP DATABASE IF EXISTS controle_os;" && \
           docker-compose -f "$TEST_COMPOSE_FILE" exec -T db psql -U postgres -c "CREATE DATABASE controle_os;" && \
           docker-compose -f "$TEST_COMPOSE_FILE" exec -T db psql -U postgres controle_os < "$backup_file"; then
            print_message $GREEN "‚úÖ Banco de dados restaurado com sucesso"
        else
            print_message $RED "‚ùå ERRO: Falha na restaura√ß√£o do banco de dados"
            return 1
        fi
    else
        print_message $YELLOW "‚ö†Ô∏è  Arquivo n√£o √© um backup SQL: $backup_file"
    fi
}

# Fun√ß√£o para restaurar m√≠dia
restore_media() {
    local backup_file="$1"
    
    if [[ "$backup_file" == *.tar.gz ]]; then
        print_message $BLUE "üìÅ Restaurando pasta media..."
        
        # Inicia container tempor√°rio para restaurar
        docker run --rm -v "$backup_file:/backup.tar.gz" -v "test_media_files:/media" alpine sh -c "
            tar -xzf /backup.tar.gz -C /media --strip-components=3 app/media/
        "
        
        print_message $GREEN "‚úÖ Pasta media restaurada"
    else
        print_message $YELLOW "‚ö†Ô∏è  Arquivo n√£o √© um backup de m√≠dia: $backup_file"
    fi
}

# Fun√ß√£o para testar aplica√ß√£o
test_application() {
    print_message $BLUE "üß™ Testando aplica√ß√£o restaurada..."
    
    cd "$TEST_DIR"
    
    # Inicia todos os servi√ßos
    docker-compose -f "$TEST_COMPOSE_FILE" up -d
    
    # Aguarda servi√ßos estarem prontos
    print_message $BLUE "‚è≥ Aguardando servi√ßos estarem prontos..."
    sleep 30
    
    # Testa endpoints principais
    local tests=(
        "http://localhost:8001/admin/"
        "http://localhost:8080/"
        "http://localhost:8001/api/"
    )
    
    local all_tests_passed=true
    
    for url in "${tests[@]}"; do
        print_message $BLUE "Testando: $url"
        
        if curl -f -s "$url" >/dev/null 2>&1; then
            print_message $GREEN "‚úÖ $url - OK"
        else
            print_message $RED "‚ùå $url - FALHOU"
            all_tests_passed=false
        fi
    done
    
    # Testa conex√£o com banco
    if docker-compose -f "$TEST_COMPOSE_FILE" exec -T db psql -U postgres -d controle_os -c "SELECT COUNT(*) FROM information_schema.tables;" >/dev/null 2>&1; then
        print_message $GREEN "‚úÖ Conex√£o com banco - OK"
    else
        print_message $RED "‚ùå Conex√£o com banco - FALHOU"
        all_tests_passed=false
    fi
    
    if [[ "$all_tests_passed" == "true" ]]; then
        print_message $GREEN "‚úÖ TODOS OS TESTES PASSARAM!"
    else
        print_message $RED "‚ùå ALGUNS TESTES FALHARAM!"
        return 1
    fi
}

# Fun√ß√£o para gerar relat√≥rio de teste
generate_test_report() {
    local backup_file="$1"
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local report_file="$TEST_DIR/restore_test_report_$timestamp.txt"
    
    print_message $BLUE "üìä Gerando relat√≥rio de teste..."
    
    {
        echo "=== RELAT√ìRIO DE TESTE DE RESTORE ==="
        echo "Data/Hora: $(date)"
        echo "Backup testado: $backup_file"
        echo "Diret√≥rio de teste: $TEST_DIR"
        echo ""
        echo "=== CONTAINERS DE TESTE ==="
        docker-compose -f "$TEST_COMPOSE_FILE" ps
        echo ""
        echo "=== LOGS DOS CONTAINERS ==="
        docker-compose -f "$TEST_COMPOSE_FILE" logs --tail=50
        echo ""
        echo "=== ESPA√áO EM DISCO ==="
        df -h
        echo ""
        echo "=== VOLUMES DE TESTE ==="
        docker volume ls | grep test
    } > "$report_file"
    
    print_message $GREEN "‚úÖ Relat√≥rio salvo em: $report_file"
}

# Fun√ß√£o para limpeza final
cleanup_test() {
    print_message $BLUE "üßπ Limpando ambiente de teste..."
    
    cd "$TEST_DIR"
    docker-compose -f "$TEST_COMPOSE_FILE" down -v
    
    # Remove volumes de teste
    docker volume ls --format "{{.Name}}" | grep "test" | xargs -r docker volume rm
    
    print_message $GREEN "‚úÖ Limpeza conclu√≠da"
}

# Fun√ß√£o principal
main() {
    print_message $BLUE "üöÄ INICIANDO TESTE DE RESTORE COMPLETO"
    echo
    
    # Verifica√ß√µes iniciais
    check_dependencies
    clean_previous_test "$@"
    
    # Seleciona arquivo de backup
    local backup_file=$(select_backup_file "$1")
    echo
    
    # Prepara ambiente
    prepare_test_environment
    echo
    
    # Executa restore baseado no tipo de arquivo
    if [[ "$backup_file" == *.sql ]]; then
        restore_database "$backup_file"
    elif [[ "$backup_file" == *.tar.gz ]]; then
        restore_media "$backup_file"
    fi
    echo
    
    # Testa aplica√ß√£o
    test_application
    echo
    
    # Gera relat√≥rio
    generate_test_report "$backup_file"
    echo
    
    # Limpeza final
    cleanup_test
    
    print_message $GREEN "‚úÖ TESTE DE RESTORE CONCLU√çDO!"
    print_message $BLUE "üìÅ Relat√≥rio salvo em: $TEST_DIR"
}

# Executa o script
main "$@" 