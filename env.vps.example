# ========================================
# CONFIGURAÇÕES PARA VPS HOSTINGER
# ========================================

# Configurações do Django
SECRET_KEY=sua-chave-secreta-muito-segura-aqui-para-producao
DEBUG=False
ALLOWED_HOSTS=localhost,127.0.0.1,seu-dominio.com,*.seu-dominio.com

# Configurações do banco de dados PostgreSQL
POSTGRES_USER=postgres
POSTGRES_PASSWORD=sua-senha-segura-aqui-para-postgres
DATABASE_URL=postgresql://postgres:sua-senha-segura-aqui-para-postgres@db:5432/controle_registro_prod

# Configurações do Redis
REDIS_PASSWORD=sua-senha-segura-aqui-para-redis
REDIS_URL=redis://:sua-senha-segura-aqui-para-redis@redis:6379/0

# Configurações do frontend
VITE_API_URL=https://seu-dominio.com/api
VITE_AUTH_URL=https://seu-dominio.com/api/auth

# Configurações de segurança
CSRF_TRUSTED_ORIGINS=https://seu-dominio.com,http://localhost,http://127.0.0.1

# Configurações de email (opcional)
EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
EMAIL_HOST=smtp.seu-provedor.com
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=seu-email@seu-provedor.com
EMAIL_HOST_PASSWORD=sua-senha-de-email

# Configurações de backup
BACKUP_RETENTION_DAYS=30
BACKUP_PATH=/app/backups

# Configurações de monitoramento
ENABLE_MONITORING=True
LOG_LEVEL=INFO

# ========================================
# INSTRUÇÕES DE CONFIGURAÇÃO
# ========================================

# 1. Copie este arquivo para .env:
#    cp env.vps.example .env

# 2. Edite o arquivo .env com suas configurações reais:
#    - Substitua 'seu-dominio.com' pelo seu domínio real
#    - Gere uma SECRET_KEY segura (use: python -c "import secrets; print(secrets.token_urlsafe(50))")
#    - Configure senhas seguras para PostgreSQL e Redis
#    - Configure as URLs do frontend para apontar para seu domínio

# 3. Gere certificados SSL:
#    - Use Let's Encrypt ou configure certificados próprios
#    - Coloque os certificados em ./ssl/cert.pem e ./ssl/key.pem

# 4. Configure o firewall:
#    - Abra apenas as portas 80, 443 e 22 (SSH)
#    - Bloqueie acesso direto ao PostgreSQL (5432) e Redis (6379)

# 5. Configure backups automáticos:
#    - Configure cron jobs para backup do banco
#    - Configure backup dos arquivos de mídia

# ========================================
# COMANDOS ÚTEIS
# ========================================

# Deploy inicial:
# docker-compose -f docker-compose.vps.yml up -d

# Ver logs:
# docker-compose -f docker-compose.vps.yml logs -f

# Backup do banco:
# docker-compose -f docker-compose.vps.yml exec db pg_dump -U postgres controle_registro_prod > backup.sql

# Restore do banco:
# docker-compose -f docker-compose.vps.yml exec -T db psql -U postgres controle_registro_prod < backup.sql

# Reiniciar serviços:
# docker-compose -f docker-compose.vps.yml restart

# Parar todos os serviços:
# docker-compose -f docker-compose.vps.yml down
